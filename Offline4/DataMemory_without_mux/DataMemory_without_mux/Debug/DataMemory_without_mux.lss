
DataMemory_without_mux.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062d  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000568  00000000  00000000  00000811  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023f  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  00001335  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	da 95       	dec	r29
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	MCUCSR = (1<<JTD);
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD) ;
  84:	84 bf       	out	0x34, r24	; 52
	DDRB = 0x00;	// B4-7 = address
  86:	17 ba       	out	0x17, r1	; 23
					// B0-3 = write_data
	DDRD = 0x00 ;	// D0 = MEM_READ
  88:	11 ba       	out	0x11, r1	; 17
					// D1 = MEM_WRITE
					// D2 = MEM_TO_REG
					// D7 = CLK
	DDRA = 0xFF ;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFE ;
  8e:	8e ef       	ldi	r24, 0xFE	; 254
  90:	84 bb       	out	0x14, r24	; 20
	PORTA=0x01;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	8b bb       	out	0x1b, r24	; 27
	const int N = 1<<8;
	unsigned char data[N] ;
	for (int i=0; i<N; i++)
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 c0       	rjmp	.+16     	; 0xac <main+0x40>
		data[i] = 0;
  9c:	e1 e0       	ldi	r30, 0x01	; 1
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ec 0f       	add	r30, r28
  a2:	fd 1f       	adc	r31, r29
  a4:	e8 0f       	add	r30, r24
  a6:	f9 1f       	adc	r31, r25
  a8:	10 82       	st	Z, r1
	DDRA = 0xFF ;
	DDRC = 0xFE ;
	PORTA=0x01;
	const int N = 1<<8;
	unsigned char data[N] ;
	for (int i=0; i<N; i++)
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	8f 3f       	cpi	r24, 0xFF	; 255
  ae:	91 05       	cpc	r25, r1
  b0:	a9 f3       	breq	.-22     	; 0x9c <main+0x30>
  b2:	a4 f3       	brlt	.-24     	; 0x9c <main+0x30>
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
	//data[4] = 0b0000111100001111;
	
	unsigned char in,location,write_data,memwrite,read_data;
	int prevclk = 0, clk;
	while (1){
		in = PINB;
  b8:	86 b3       	in	r24, 0x16	; 22
		write_data = (unsigned char)(in & 0x0F) ;
  ba:	68 2f       	mov	r22, r24
  bc:	6f 70       	andi	r22, 0x0F	; 15
		location = (unsigned char)( (in >> 4 ) & 0x0F );
  be:	28 2f       	mov	r18, r24
  c0:	22 95       	swap	r18
  c2:	2f 70       	andi	r18, 0x0F	; 15
		
		memwrite = (PIND >> 1) & 1;
  c4:	30 b3       	in	r19, 0x10	; 16
		// mem_to_reg = (PIND >> 2) & 1;
		clk = (PIND>>7) & 1;
  c6:	80 b3       	in	r24, 0x10	; 16
  c8:	88 1f       	adc	r24, r24
  ca:	88 27       	eor	r24, r24
  cc:	88 1f       	adc	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
		
		if(memwrite==1)
  d0:	31 ff       	sbrs	r19, 1
  d2:	0c c0       	rjmp	.+24     	; 0xec <main+0x80>
		{
			if (prevclk == 0 && clk == 1){
  d4:	45 2b       	or	r20, r21
  d6:	51 f4       	brne	.+20     	; 0xec <main+0x80>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 05       	cpc	r25, r1
  dc:	39 f4       	brne	.+14     	; 0xec <main+0x80>
				data[location]=write_data;
  de:	e1 e0       	ldi	r30, 0x01	; 1
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ec 0f       	add	r30, r28
  e4:	fd 1f       	adc	r31, r29
  e6:	e2 0f       	add	r30, r18
  e8:	f1 1d       	adc	r31, r1
  ea:	60 83       	st	Z, r22
			}
		}
		
		
		read_data=data[location];
  ec:	e1 e0       	ldi	r30, 0x01	; 1
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ec 0f       	add	r30, r28
  f2:	fd 1f       	adc	r31, r29
  f4:	e2 0f       	add	r30, r18
  f6:	f1 1d       	adc	r31, r1
  f8:	20 81       	ld	r18, Z
		
		PORTA = read_data;
  fa:	2b bb       	out	0x1b, r18	; 27
		prevclk = clk;
  fc:	ac 01       	movw	r20, r24
	}
  fe:	dc cf       	rjmp	.-72     	; 0xb8 <main+0x4c>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
