
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d1  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053e  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d7  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  000012eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  70:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x00;
  72:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0x00;
  74:	14 ba       	out	0x14, r1	; 20
	
    while (1) 
    {
		unsigned char op1 = (PINB >> 4);
  76:	86 b3       	in	r24, 0x16	; 22
  78:	98 2f       	mov	r25, r24
  7a:	92 95       	swap	r25
  7c:	9f 70       	andi	r25, 0x0F	; 15
		unsigned char op2 = (PINB & 0x0F);
  7e:	86 b3       	in	r24, 0x16	; 22
  80:	38 2f       	mov	r19, r24
  82:	3f 70       	andi	r19, 0x0F	; 15
		unsigned char immediate = (PIND >> 4);
  84:	80 b3       	in	r24, 0x10	; 16
  86:	28 2f       	mov	r18, r24
  88:	22 95       	swap	r18
  8a:	2f 70       	andi	r18, 0x0F	; 15
		unsigned char alusrc = (PIND >> 3) & 1;
  8c:	50 b3       	in	r21, 0x10	; 16
		unsigned char aluop = (PIND & 0x07);
  8e:	80 b3       	in	r24, 0x10	; 16
  90:	87 70       	andi	r24, 0x07	; 7
		
		unsigned char result;
		
		if (alusrc) {
  92:	53 ff       	sbrs	r21, 3
  94:	2e c0       	rjmp	.+92     	; 0xf2 <main+0x86>
			if (aluop == 0)
  96:	81 11       	cpse	r24, r1
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x34>
				result = op1 + op2;
  9a:	49 2f       	mov	r20, r25
  9c:	43 0f       	add	r20, r19
  9e:	56 c0       	rjmp	.+172    	; 0x14c <main+0xe0>
			else if (aluop == 1)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	31 f4       	brne	.+12     	; 0xb0 <main+0x44>
				result = (op1 << op2);
  a4:	49 2f       	mov	r20, r25
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x3e>
  a8:	44 0f       	add	r20, r20
  aa:	3a 95       	dec	r19
  ac:	ea f7       	brpl	.-6      	; 0xa8 <main+0x3c>
  ae:	4e c0       	rjmp	.+156    	; 0x14c <main+0xe0>
			else if (aluop == 2) 
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	19 f4       	brne	.+6      	; 0xba <main+0x4e>
				result = op1 - op2;
  b4:	49 2f       	mov	r20, r25
  b6:	43 1b       	sub	r20, r19
  b8:	49 c0       	rjmp	.+146    	; 0x14c <main+0xe0>
			else if (aluop == 3)
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	19 f4       	brne	.+6      	; 0xc4 <main+0x58>
				result = op1 | op2;
  be:	49 2f       	mov	r20, r25
  c0:	43 2b       	or	r20, r19
  c2:	44 c0       	rjmp	.+136    	; 0x14c <main+0xe0>
			else if (aluop == 4)
  c4:	84 30       	cpi	r24, 0x04	; 4
  c6:	19 f4       	brne	.+6      	; 0xce <main+0x62>
				result = op1 & op2;
  c8:	49 2f       	mov	r20, r25
  ca:	43 23       	and	r20, r19
  cc:	3f c0       	rjmp	.+126    	; 0x14c <main+0xe0>
			else if (aluop == 5)
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	49 f4       	brne	.+18     	; 0xe4 <main+0x78>
				result = (op1 >> op2);
  d2:	89 2f       	mov	r24, r25
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x70>
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	3a 95       	dec	r19
  de:	e2 f7       	brpl	.-8      	; 0xd8 <main+0x6c>
  e0:	48 2f       	mov	r20, r24
  e2:	34 c0       	rjmp	.+104    	; 0x14c <main+0xe0>
			else if (aluop == 6)
  e4:	86 30       	cpi	r24, 0x06	; 6
  e6:	91 f5       	brne	.+100    	; 0x14c <main+0xe0>
				result = ~(op1 | op2);
  e8:	89 2f       	mov	r24, r25
  ea:	83 2b       	or	r24, r19
  ec:	48 2f       	mov	r20, r24
  ee:	40 95       	com	r20
  f0:	2d c0       	rjmp	.+90     	; 0x14c <main+0xe0>
		}
		else {
			if (aluop == 0)
  f2:	81 11       	cpse	r24, r1
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x90>
				result = op1 + immediate;
  f6:	49 2f       	mov	r20, r25
  f8:	42 0f       	add	r20, r18
  fa:	28 c0       	rjmp	.+80     	; 0x14c <main+0xe0>
			else if (aluop == 1)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	31 f4       	brne	.+12     	; 0x10c <main+0xa0>
				result = (op1 << immediate);
 100:	49 2f       	mov	r20, r25
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x9a>
 104:	44 0f       	add	r20, r20
 106:	2a 95       	dec	r18
 108:	ea f7       	brpl	.-6      	; 0x104 <main+0x98>
 10a:	20 c0       	rjmp	.+64     	; 0x14c <main+0xe0>
			else if (aluop == 2)
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	19 f4       	brne	.+6      	; 0x116 <main+0xaa>
				result = op1 - immediate;
 110:	49 2f       	mov	r20, r25
 112:	42 1b       	sub	r20, r18
 114:	1b c0       	rjmp	.+54     	; 0x14c <main+0xe0>
			else if (aluop == 3)
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	19 f4       	brne	.+6      	; 0x120 <main+0xb4>
				result = op1 | immediate;
 11a:	49 2f       	mov	r20, r25
 11c:	42 2b       	or	r20, r18
 11e:	16 c0       	rjmp	.+44     	; 0x14c <main+0xe0>
			else if (aluop == 4)
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	19 f4       	brne	.+6      	; 0x12a <main+0xbe>
				result = op1 & immediate;
 124:	49 2f       	mov	r20, r25
 126:	42 23       	and	r20, r18
 128:	11 c0       	rjmp	.+34     	; 0x14c <main+0xe0>
			else if (aluop == 5)
 12a:	85 30       	cpi	r24, 0x05	; 5
 12c:	49 f4       	brne	.+18     	; 0x140 <main+0xd4>
				result = (op1 >> immediate);
 12e:	89 2f       	mov	r24, r25
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0xcc>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	2a 95       	dec	r18
 13a:	e2 f7       	brpl	.-8      	; 0x134 <main+0xc8>
 13c:	48 2f       	mov	r20, r24
 13e:	06 c0       	rjmp	.+12     	; 0x14c <main+0xe0>
			else if (aluop == 6)
 140:	86 30       	cpi	r24, 0x06	; 6
 142:	21 f4       	brne	.+8      	; 0x14c <main+0xe0>
				result = ~(op1 | immediate);
 144:	89 2f       	mov	r24, r25
 146:	82 2b       	or	r24, r18
 148:	48 2f       	mov	r20, r24
 14a:	40 95       	com	r20
		}
		
		PORTA = ((result)<<4);
 14c:	84 2f       	mov	r24, r20
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	8b bb       	out	0x1b, r24	; 27
		if ((result & 0x0F) == 0) {
 154:	84 2f       	mov	r24, r20
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	09 f0       	breq	.+2      	; 0x15c <main+0xf0>
 15a:	8d cf       	rjmp	.-230    	; 0x76 <main+0xa>
			PORTA |= (1 << 3);
 15c:	8b b3       	in	r24, 0x1b	; 27
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	8b bb       	out	0x1b, r24	; 27
 162:	89 cf       	rjmp	.-238    	; 0x76 <main+0xa>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
