
Register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062c  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000543  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000236  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	60 97       	sbiw	r28, 0x10	; 16
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	// Input PC(8), Output PC(8), CLK(1) Pin, JMP Address(8), Branch Address(4), Zero, BranchFlag JMP(4)
	DDRD = 0x00;
  80:	11 ba       	out	0x11, r1	; 17
	DDRB = 0x00;
  82:	17 ba       	out	0x17, r1	; 23
	DDRA = 0xFF;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x00;
  88:	14 ba       	out	0x14, r1	; 20
	
	PORTA = 0;
  8a:	1b ba       	out	0x1b, r1	; 27
	
    /* Replace with your application code */
	int reg[8];
	int prev_clock = 0;
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
    while (1) 
    {
		
		
		unsigned char reg1 = (PINB) & 0x0F;
  90:	e6 b3       	in	r30, 0x16	; 22
  92:	ef 70       	andi	r30, 0x0F	; 15
		unsigned char reg2 = (PINB>>4);
  94:	86 b3       	in	r24, 0x16	; 22
  96:	82 95       	swap	r24
  98:	8f 70       	andi	r24, 0x0F	; 15
		unsigned char reg3 = (PIND) & 0x0F;
  9a:	a0 b3       	in	r26, 0x10	; 16
  9c:	af 70       	andi	r26, 0x0F	; 15
		unsigned char write_data = (PINC) & 0x0F;
  9e:	b3 b3       	in	r27, 0x13	; 19
  a0:	bf 70       	andi	r27, 0x0F	; 15
		
		unsigned char regwrite = (PIND >> 5) & 1;
  a2:	10 b3       	in	r17, 0x10	; 16
  a4:	15 fb       	bst	r17, 5
  a6:	11 27       	eor	r17, r17
  a8:	10 f9       	bld	r17, 0
		unsigned char regdst = (PIND >> 6) & 1;
  aa:	00 b3       	in	r16, 0x10	; 16
  ac:	06 fb       	bst	r16, 6
  ae:	00 27       	eor	r16, r16
  b0:	00 f9       	bld	r16, 0
		unsigned char clk = (PIND >> 7) & 1;
  b2:	60 b3       	in	r22, 0x10	; 16
  b4:	66 1f       	adc	r22, r22
  b6:	66 27       	eor	r22, r22
  b8:	66 1f       	adc	r22, r22
		
		unsigned char read_data1,read_data2;
		
		read_data1=reg[reg1];
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	2c 0f       	add	r18, r28
  c6:	3d 1f       	adc	r19, r29
  c8:	e2 0f       	add	r30, r18
  ca:	f3 1f       	adc	r31, r19
  cc:	70 81       	ld	r23, Z
		read_data2=reg[reg2];
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e2 0f       	add	r30, r18
  d8:	f3 1f       	adc	r31, r19
  da:	20 81       	ld	r18, Z
  dc:	31 81       	ldd	r19, Z+1	; 0x01
		
		PORTA = (read_data2<<4)|read_data1;
  de:	33 27       	eor	r19, r19
  e0:	22 95       	swap	r18
  e2:	32 95       	swap	r19
  e4:	30 7f       	andi	r19, 0xF0	; 240
  e6:	32 27       	eor	r19, r18
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	32 27       	eor	r19, r18
  ec:	27 2b       	or	r18, r23
  ee:	2b bb       	out	0x1b, r18	; 27
		if (prev_clock == 0 && clk == 1) {
  f0:	45 2b       	or	r20, r21
  f2:	09 f5       	brne	.+66     	; 0x136 <main+0xca>
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	f9 f4       	brne	.+62     	; 0x136 <main+0xca>
			if(regwrite){
  f8:	11 23       	and	r17, r17
  fa:	e9 f0       	breq	.+58     	; 0x136 <main+0xca>
				if(regdst==0) {
  fc:	01 11       	cpse	r16, r1
  fe:	0d c0       	rjmp	.+26     	; 0x11a <main+0xae>
					reg[reg2]=write_data;
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	e1 e0       	ldi	r30, 0x01	; 1
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	e8 0f       	add	r30, r24
 10e:	f9 1f       	adc	r31, r25
 110:	8b 2f       	mov	r24, r27
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	91 83       	std	Z+1, r25	; 0x01
 116:	80 83       	st	Z, r24
 118:	0e c0       	rjmp	.+28     	; 0x136 <main+0xca>
				}
				else {
					reg[reg3]=write_data;
 11a:	ea 2f       	mov	r30, r26
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	8c 0f       	add	r24, r28
 128:	9d 1f       	adc	r25, r29
 12a:	e8 0f       	add	r30, r24
 12c:	f9 1f       	adc	r31, r25
 12e:	8b 2f       	mov	r24, r27
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
				}
			}
		}
		prev_clock = clk;
 136:	46 2f       	mov	r20, r22
 138:	50 e0       	ldi	r21, 0x00	; 0
    }
 13a:	aa cf       	rjmp	.-172    	; 0x90 <main+0x24>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
