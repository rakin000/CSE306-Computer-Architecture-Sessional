
ALU_without_mux.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b3  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052f  00000000  00000000  00000787  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000237  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
 
 
int main(void)
{
        DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23
        DDRD = 0x00;
  6e:	11 ba       	out	0x11, r1	; 17
        DDRA = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
        DDRC = 0xFF;
  74:	84 bb       	out	0x14, r24	; 20
       
    while (1)
    {
                unsigned char op1 = (PINB >> 4);
  76:	86 b3       	in	r24, 0x16	; 22
  78:	82 95       	swap	r24
  7a:	8f 70       	andi	r24, 0x0F	; 15
                unsigned char op2 = (PINB & 0x0F);
  7c:	26 b3       	in	r18, 0x16	; 22
  7e:	42 2f       	mov	r20, r18
  80:	4f 70       	andi	r20, 0x0F	; 15
               // unsigned char immediate = (PIND >> 4);
               // unsigned char alusrc = (PIND >> 3) & 0x01;	
                unsigned char aluop = (PIND & 0x07);
  82:	90 b3       	in	r25, 0x10	; 16
  84:	97 70       	andi	r25, 0x07	; 7
               
                unsigned char result=0;
               
                
                if (aluop == 0)
  86:	11 f4       	brne	.+4      	; 0x8c <main+0x20>
					result = op1 + op2;
  88:	84 0f       	add	r24, r20
  8a:	24 c0       	rjmp	.+72     	; 0xd4 <main+0x68>
                else if (aluop == 1)
  8c:	91 30       	cpi	r25, 0x01	; 1
  8e:	29 f4       	brne	.+10     	; 0x9a <main+0x2e>
					result = (op1 << op2);
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x28>
  92:	88 0f       	add	r24, r24
  94:	4a 95       	dec	r20
  96:	ea f7       	brpl	.-6      	; 0x92 <main+0x26>
  98:	1d c0       	rjmp	.+58     	; 0xd4 <main+0x68>
                else if (aluop == 2)
  9a:	92 30       	cpi	r25, 0x02	; 2
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x36>
					result = op1 - op2;
  9e:	84 1b       	sub	r24, r20
  a0:	19 c0       	rjmp	.+50     	; 0xd4 <main+0x68>
                else if (aluop == 3)
  a2:	93 30       	cpi	r25, 0x03	; 3
  a4:	11 f4       	brne	.+4      	; 0xaa <main+0x3e>
					result = op1 | op2;
  a6:	84 2b       	or	r24, r20
  a8:	15 c0       	rjmp	.+42     	; 0xd4 <main+0x68>
                else if (aluop == 4)
  aa:	94 30       	cpi	r25, 0x04	; 4
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x46>
					result = op1 & op2;
  ae:	84 23       	and	r24, r20
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <main+0x68>
                else if (aluop == 5)
  b2:	95 30       	cpi	r25, 0x05	; 5
  b4:	49 f4       	brne	.+18     	; 0xc8 <main+0x5c>
					result = (op1 >> op2);
  b6:	28 2f       	mov	r18, r24
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	c9 01       	movw	r24, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x56>
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	4a 95       	dec	r20
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x52>
  c6:	06 c0       	rjmp	.+12     	; 0xd4 <main+0x68>
                else if (aluop == 6)
  c8:	96 30       	cpi	r25, 0x06	; 6
  ca:	19 f4       	brne	.+6      	; 0xd2 <main+0x66>
					result = ~(op1 | op2);
  cc:	84 2b       	or	r24, r20
  ce:	80 95       	com	r24
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <main+0x68>
                unsigned char op2 = (PINB & 0x0F);
               // unsigned char immediate = (PIND >> 4);
               // unsigned char alusrc = (PIND >> 3) & 0x01;	
                unsigned char aluop = (PIND & 0x07);
               
                unsigned char result=0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
					result = (op1 >> op2);
                else if (aluop == 6)
					result = ~(op1 | op2);
              
               
                PORTA = ((result)<<4);
  d4:	98 2f       	mov	r25, r24
  d6:	92 95       	swap	r25
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	9b bb       	out	0x1b, r25	; 27
				PORTA &= (0x01 << 3) ;
  dc:	9b b3       	in	r25, 0x1b	; 27
  de:	98 70       	andi	r25, 0x08	; 8
  e0:	9b bb       	out	0x1b, r25	; 27
                if ((result & 0x0F) == 0) {
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	41 f6       	brne	.-112    	; 0x76 <main+0xa>
                        PORTA |= (0x01 << 3);
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	c4 cf       	rjmp	.-120    	; 0x76 <main+0xa>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
