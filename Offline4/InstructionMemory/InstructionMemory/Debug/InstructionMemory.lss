
InstructionMemory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005dd  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000541  00000000  00000000  000007ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000210  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ff  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004e  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)

{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	MCUCSR = (1<<JTD);
  74:	80 e8       	ldi	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD);
  78:	84 bf       	out	0x34, r24	; 52
	/* Replace with your application code */
	DDRB = 0x00;
  7a:	17 ba       	out	0x17, r1	; 23
	
	DDRA = 0xFF ;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF ;
  80:	84 bb       	out	0x14, r24	; 20
	
	const int N = 1<<8;
	uint16_t instructions[N] ;
  82:	8d b7       	in	r24, 0x3d	; 61
  84:	9e b7       	in	r25, 0x3e	; 62
  86:	92 50       	subi	r25, 0x02	; 2
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	9e bf       	out	0x3e, r25	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	8d bf       	out	0x3d, r24	; 61
  92:	ed b7       	in	r30, 0x3d	; 61
  94:	fe b7       	in	r31, 0x3e	; 62
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	9f 01       	movw	r18, r30
	instructions[128] = 0xFFFF;
  9a:	ad b7       	in	r26, 0x3d	; 61
  9c:	be b7       	in	r27, 0x3e	; 62
  9e:	af 5f       	subi	r26, 0xFF	; 255
  a0:	be 4f       	sbci	r27, 0xFE	; 254
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	9f ef       	ldi	r25, 0xFF	; 255
  a6:	8d 93       	st	X+, r24
  a8:	9c 93       	st	X, r25
	instructions[0] = 0b0000000000000000;
  aa:	ad b7       	in	r26, 0x3d	; 61
  ac:	be b7       	in	r27, 0x3e	; 62
  ae:	12 96       	adiw	r26, 0x02	; 2
  b0:	1c 92       	st	X, r1
  b2:	1e 92       	st	-X, r1
  b4:	11 97       	sbiw	r26, 0x01	; 1
	instructions[1] = 0b1100101101001010;
  b6:	8a e4       	ldi	r24, 0x4A	; 74
  b8:	9b ec       	ldi	r25, 0xCB	; 203
  ba:	93 83       	std	Z+3, r25	; 0x03
  bc:	82 83       	std	Z+2, r24	; 0x02
	instructions[2] = 0b1111111100000000;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	9f ef       	ldi	r25, 0xFF	; 255
  c2:	95 83       	std	Z+5, r25	; 0x05
  c4:	84 83       	std	Z+4, r24	; 0x04
	instructions[3] = 0b0000000011111111;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	97 83       	std	Z+7, r25	; 0x07
  cc:	86 83       	std	Z+6, r24	; 0x06
	instructions[4] = 0b0000111100001111;
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	91 87       	std	Z+9, r25	; 0x09
  d4:	80 87       	std	Z+8, r24	; 0x08
	
	unsigned char in, temp , temp2 ;
	while (1)
	{
		in = PINB ;
  d6:	e6 b3       	in	r30, 0x16	; 22
		temp = (unsigned char)(instructions[in] & 0x00FF) ;
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e2 0f       	add	r30, r18
  e0:	f3 1f       	adc	r31, r19
  e2:	90 81       	ld	r25, Z
  e4:	81 81       	ldd	r24, Z+1	; 0x01
		temp2 = (unsigned char)((instructions[in] >> 8 ) & 0x00FF );
		PORTA = temp;
  e6:	9b bb       	out	0x1b, r25	; 27
		PORTC = temp2;
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	f5 cf       	rjmp	.-22     	; 0xd6 <main+0x6a>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
